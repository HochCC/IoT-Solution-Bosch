@model IEnumerable<Connecting.Models.Comp>

<div class="modal fade" id="defaultModal0" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="defaultModalLabel">QR Code Scan</h4>
            </div>
            <div class="modal-body">
                Please choose the status and click, Scan the QRcode for updating
                <video id="2" autoplay style="width:100%; height:100%; object-fit: fill"></video>
            </div>
            <div class="modal-footer">
                <button id="create" type="button" class="btn btn-link waves-effect">Scan</button>
                <button id="stop" type="button" class="btn btn-link waves-effect" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="row clearfix">
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
        <div class="card">
            <div class="header">
                <div class="row clearfix">
                    <div class="col-xs-12 col-sm-6">
                        <h2>Usage Prediction</h2>
                    </div>
                </div>
            </div>
            <div>
                <div class="body">
                    <div id="main" class="dashboard-flot-chart"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row clearfix">
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
        <div class="card">
            <div class="header">
                <div class="row clearfix">
                    <div class="col-xs-12 col-sm-6">
                        <h2>Pallets</h2>
                    </div>
                </div>
            </div>
            <div>
                <div class="body">
                    <div class="table-responsive">
                        @Html.ActionLink("Create New", "Create")
                        <table class="table table-bordered table-striped table-hover dataTable js-exportable">
                            <tr>
                                <th>
                                    @Html.DisplayNameFor(model => model.Time)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.Turnoverboxes)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.Company)
                                </th>
                                <th></th>
                            </tr>

                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Time)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Turnoverboxes)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Company)
                                    </td>
                                    <td>
                                        @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                                        @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                                    </td>
                                </tr>
                            }
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section MyScripts {
    <script src="../../Scripts/ecStat.min.js"></script>
    <script src="../../Scripts/ecStat.js"></script>
    <script type="text/javascript">
        var myChart1 = echarts.init(document.getElementById('main'));

        var data1 = [
    [1, 81],
    [2, 85],
    [3, 36],
    [4, 27],
    [5, 6],
    [6, 36],
    [7, 80],
    [8, 20],
    [9, 37],
    [10, 70],
    [11, 72],
    [12, 63],
    [13, 107],
    [14, 33],
    [15, 25],
    [16, 64],
    [17, 150],
    [18, 120],
    [19, 120],
    [20, 108]
];

        var XZ = new Array();
        var YZ = new Array(); 
        var X = new Array(); //先声明一维
        
       // var ZZ = new Array(new array(), new array());
        var array = @Html.Raw( Json.Encode( (Model).Select(m=> new
               { 
                   time = m.Time,
                   value = m.Turnoverboxes
               })
        )  );
        for (k in array) {  
            X[k] = new Array();  
            for (var j = 0; j < 2; j++) { 
                X[k][j] = "";  
            }
        }
        for (i in array) {
            XZ[i] = array[i].time;
            YZ[i] = array[i].value; 
            X[i][0] = XZ[i];
            X[i][1] = YZ[i];
           // X.push(XZ[i], YZ[i]); 
        } 
        console.log(array);
        console.log(XZ);
        console.log(YZ);  
        console.log(X);


        var data = X;

var myRegression = ecStat.regression('polynomial', data, 5);

myRegression.points.sort(function(a, b) {
    return a[0] - b[0];
});

option = {

    tooltip: {
        trigger: 'axis',
        axisPointer: {
            type: 'cross'
        }
    }, 
    xAxis: {
        type: 'value',
        splitLine: {
            lineStyle: {
                type: 'dashed'
            }
        },
        splitNumber: 20
    },
    yAxis: {
        type: 'value', 
        splitLine: {
            lineStyle: {
                type: 'dashed'
            }
        }
    },
    grid: {
        left: '40',
        right: '30',
        bottom: '20',
        top: '30'
    },
    series: [{
        name: 'scatter',
        type: 'scatter',
        label: {
            emphasis: {
                show: true,
                position: 'right',
                textStyle: {
                    color: 'blue',
                    fontSize: 16
                }
            }
        },
        data: data
    }, {
        name: 'line',
        type: 'line',
        smooth: true,
        showSymbol: false,
        data: myRegression.points,
        markPoint: {
            itemStyle: {
                normal: {
                    color: 'transparent'
                }
            },
            label: {
                normal: {
                    show: true,
                    position: 'left',
                    formatter: myRegression.expression,
                    textStyle: {
                        color: '#333',
                        fontSize: 14
                    }
                }
            },
            data: [{
                coord: myRegression.points[myRegression.points.length - 1]
            }]
        }
    }]
};

        myChart1.setOption(option);
        window.onresize = resize(myChart1);
    </script>
}
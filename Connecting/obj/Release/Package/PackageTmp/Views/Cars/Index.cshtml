@model IEnumerable<Connecting.Models.Car>

<!-- Default Size -->
<div class="modal fade" id="defaultModal0" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="defaultModalLabel">QR Code Scan</h4>
            </div>
            <div class="modal-body">
                Please choose the status and click, Scan the QRcode for updating
                <video id="2" autoplay style="width:100%; height:100%; object-fit: fill"></video>
            </div>
            <div class="modal-footer">
                <button id="create" type="button" class="btn btn-link waves-effect">Scan</button>
                <button id="stop" type="button" class="btn btn-link waves-effect" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="row clearfix">
    <div class="col-xs-12 col-sm-12 col-md-4 col-lg-4">
        <div class="card">
            <div class="header">
                <h2>Status</h2>
                <ul class="header-dropdown m-r--5">
                    <li class="dropdown">
                        <a href="javascript:void(0);" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
                            <i class="material-icons">more_vert</i>
                        </a>
                        <ul class="dropdown-menu pull-right">
                            <li><a href="javascript:void(0);">Action</a></li>
                            <li><a href="javascript:void(0);">Another action</a></li>
                            <li><a href="javascript:void(0);">Something else here</a></li>
                        </ul>
                    </li>
                </ul>
            </div>
            <div class="body">
                <div id="main0" class="dashboard-flot-chart"></div>
            </div>
        </div>
    </div>


    <div class="col-xs-12 col-sm-12 col-md-8 col-lg-8">
        <div class="card">
            <div class="header">
                <div class="row clearfix">
                    <div class="col-xs-12 col-sm-6">
                        <h2>Truck</h2>
                    </div>
                </div>
            </div>
            <div>
                <div class="body">
                    <div id="main2" class="dashboard-flot-chart"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row clearfix">
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
        <div class="card">
            <div class="header">
                <div class="row clearfix">
                    <div class="col-xs-12 col-sm-6">
                        <h2>Truck</h2>
                    </div>
                </div>
            </div>
            <div>
                <div class="body">
                    <div class="table-responsive">
                        @Html.ActionLink("Create New", "Create")
                        <table class="table table-bordered table-striped table-hover js-basic-example dataTable">
                            <tr>
                                <th>
                                    @Html.DisplayNameFor(model => model.Car_id)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.Location_x)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.Location_y)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.Temperature)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.Humidity)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.Lfrom)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.Lto)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.Speed)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.Time)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.Status)
                                </th>
                                <th></th>
                            </tr>

                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Car_id)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Location_x)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Location_y)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Temperature)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Humidity)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Lfrom)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Lto)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Speed)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Time)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Status)
                                    </td>
                                    <td>
                                        @Html.ActionLink("Edit", "Edit", new { id = item.Car_id }) |
                                        @* @Html.ActionLink("Details", "Details", new { id = item.Car_id })| *@
                                        @Html.ActionLink("Navigation", "onepoint", new { id = item.Car_id }) |
                                        @Html.ActionLink("Delete", "Delete", new { id = item.Car_id })
                                    </td>
                                </tr>
                            }
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row clearfix">
    <div class="col-xs-12 col-sm-12 col-md-6 col-lg-6">
        <div class="card">
            <div class="header">
                <h2>Temperature</h2>
                <ul class="header-dropdown m-r--5">
                    <li class="dropdown">
                        <a href="javascript:void(0);" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
                            <i class="material-icons">more_vert</i>
                        </a>
                        <ul class="dropdown-menu pull-right">
                            <li><a href="javascript:void(0);">Action</a></li>
                            <li><a href="javascript:void(0);">Another action</a></li>
                            <li><a href="javascript:void(0);">Something else here</a></li>
                        </ul>
                    </li>
                </ul>
            </div>
            <div class="body">
                <div id="ff" class="dashboard-flot-chart"></div>
            </div>
        </div>
    </div>


    <div class="col-xs-12 col-sm-12 col-md-6 col-lg-6">
        <div class="card">
            <div class="header">
                <div class="row clearfix">
                    <div class="col-xs-12 col-sm-6">
                        <h2>Humidity</h2>
                    </div>
                </div>
            </div>
            <div>
                <div class="body">
                    <div id="goes" class="dashboard-flot-chart"></div>
                </div>
            </div>
        </div>
    </div>
</div>

@section MyScripts {
    
    <script type="text/javascript">
        var myChart1 = echarts.init(document.getElementById('main0'));
        // 指定图表的配置项和数据
        var XZ=new Array();
        var YZ=new Array();
        var array = @Html.Raw( Json.Encode( (Model).Select(m=> new
               {
                   value = m.Status,
                   name = m.Status
               })
        )  );

        for (i in array) {
            XZ[i] =  array[i].value;
        }

        var _res = [];
        XZ.sort();
        for (var i = 0; i < XZ.length;) {
            var count = 0;
            for (var j = i; j < XZ.length; j++) {
                if (XZ[i] == XZ[j]) {
                    count++;
                }
            }
            _res.push([count, XZ[i]]);
            i += count;
        }
        //console.log(_res);

        option = {
            tooltip: {
                trigger: 'item',
                formatter: "{a} <br/>{b} {c} ({d}%)"
            },
            legend: {
                orient: 'vertical',
                x: 'left',
                data: ['In use', 'Free', 'Broken', 'Over cyclelife', 'Repairing']
            },

            series: [
                {
                    name: 'Turnover Boxes',
                    type: 'pie',
                    radius: ['70%', '93%'],
                    avoidLabelOverlap: false,
                    label: {
                        normal: {
                            show: false,
                            position: 'center'
                        },
                        emphasis: {
                            show: true,
                            textStyle: {
                                fontSize: '30',
                                fontWeight: 'bold'
                            }
                        }
                    },
                    labelLine: {
                        normal: {
                            show: false
                        }
                    },
                    data: _res
                }
            ]
        };

        myChart1.setOption(option);

        // 基于准备好的dom，初始化echarts实例
        var myChart2 = echarts.init(document.getElementById('main2'));

        // 指定图表的配置项和数据
        var XZ=new Array();
        var YZ=new Array();
        var array = @Html.Raw( Json.Encode( (Model).Select(m=> new
               {
                   //id = m.Status,
                   name = m.Status
               })
        )  );
        for (i in array) {
            XZ[i] = array[i].name;
        }

        var X = [];
        var Y = [];
        XZ.sort();
        for (var i = 0; i < XZ.length;) {
            var count = 0;
            for (var j = i; j < XZ.length; j++) {
                if (XZ[i] == XZ[j]) {
                    count++;
                }
            }
            X.push(XZ[i]);
            Y.push(count);
            i += count;
        }
        //console.log(_res);

        option = {
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'shadow'
                }
            },
            toolbox: {
                show: true,
                feature: {
                    magicType: { show: true, type: ['line', 'bar'] }
                }
            },
            calculable: true,
            xAxis: [
                {
                    data: X
                }
            ],
            yAxis: [
                {
                    show: false,
                    type: 'value'
                }
            ],
            series: [
                {
                    name: 'Turnoverbox Number',
                    type: 'bar',
                    data: Y,
                    markPoint: {
                        data: [
                            { name: 'max', type: 'max' },
                            { name: 'min', type: 'min' }
                        ]
                    },
                    markLine: {
                        data: [
                            { type: 'average', name: 'average' }
                        ]
                    }
                }
            ]
        };
        // 使用刚指定的配置项和数据显示图表。
        myChart2.setOption(option); 

        var myChart3 = echarts.init(document.getElementById('ff'));

        // 初始 option
        option = {
            grid: {
                left: '33',
                right: '33',
                bottom: '30'
            },
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'cross',
                    label: {
                        backgroundColor: '#283b56'
                    }
                }
            },
            legend: {
                data: ['Temperature']
            },
            toolbox: {
                show: true,
                feature: {
                    dataView: { readOnly: false },
                }
            },
            dataZoom: {
                show: false,
                start: 0,
                end: 100
            },
            xAxis: [
                {
                    show: true,
                    gridIndex: 0,
                    type: 'category',
                    boundaryGap: true,
                    axisLine: { onZero: false },
                    boundaryGap: false,
                    data: (function () {
                        var now = new Date();
                        var res = [];
                        var len = 15;
                        while (len--) {
                            res.unshift(now.toLocaleTimeString().replace(/^\D*/, ''));
                            now = new Date(now - 2000);
                        }
                        return res;
                    })()
                },
                {
                    show: false,
                    gridIndex: 0,
                    type: 'category',
                    boundaryGap: false,
                    data: (function () {
                        var res = [];
                        var len = 15;
                        while (len--) {
                            res.push(15 - len - 1);
                        }
                        return res;
                    })()
                }
            ],
            yAxis: [
                {
                    type: 'value',
                    gridIndex: 0,
                    scale: true,
                    splitLine: {
                        show: false
                    },
                    name: 'Temperature',
                    max: 50,
                    min: 0,
                }
            ],
            series: [
                {
                    name: 'Temperature',
                    type: 'line',
                    data: (function () {
                        var res = [];
                        var len = 0;
                        while (len < 15) {
                            res.push((Math.random() * 10 + 50).toFixed(1));
                            len++;
                        }
                        return res;
                    })()
                }
            ]
        };

        var mypush = $.connection.myHub2;

        mypush.client.sendTest2 = function (array) {
            var data0 = option.series[0].data;
            data0.shift();
            data0.push(array);
            console.log(data0);
            axisData = (new Date()).toLocaleTimeString().replace(/^\D*/, '');
            option.xAxis[0].data.shift();
            option.xAxis[0].data.push(axisData);
            option.xAxis[1].data.shift();
            option.xAxis[1].data.push(myChart3.count++);
            myChart3.setOption(option);
        };
        $.connection.hub.start();
        
        var myChart4 = echarts.init(document.getElementById('goes'));

        // 初始 option
        option2 = {
            grid: {
                left: '33',
                right: '33',
                bottom: '30'
            },
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'cross',
                    label: {
                        backgroundColor: '#283b56'
                    }
                }
            },
            legend: {
                data: ['Humidity']
            },
            toolbox: {
                show: true,
                feature: {
                    dataView: { readOnly: false },
                }
            },
            dataZoom: {
                show: false,
                start: 0,
                end: 100
            },
            xAxis: [
                {
                    show: true,
                    gridIndex: 0,
                    type: 'category',
                    boundaryGap: true,
                    axisLine: { onZero: false },
                    boundaryGap: false,
                    data: (function () {
                        var now = new Date();
                        var res = [];
                        var len = 15;
                        while (len--) {
                            res.unshift(now.toLocaleTimeString().replace(/^\D*/, ''));
                            now = new Date(now - 2000);
                        }
                        return res;
                    })()
                },
                {
                    show: false,
                    gridIndex: 0,
                    type: 'category',
                    boundaryGap: false,
                    data: (function () {
                        var res = [];
                        var len = 15;
                        while (len--) {
                            res.push(15 - len - 1);
                        }
                        return res;
                    })()
                }
            ],
            yAxis: [
                {
                    type: 'value',
                    gridIndex: 0,
                    scale: true,
                    splitLine: {
                        show: false
                    },
                    name: 'Humidity',
                    max: 100,
                    min: 0,
                }
            ],
            series: [
                {
                    name: 'Humidity',
                    type: 'line',
                    data: (function () {
                        var res = [];
                        var len = 0;
                        while (len < 15) {
                            res.push((Math.random() * 10 + 50).toFixed(1));
                            len++;
                        }
                        return res;
                    })()
                }
            ]
        };

        var mypush2 = $.connection.myHub2;

        mypush2.client.sendTest1 = function (array) {
            var data02 = option2.series[0].data;
            data02.shift();
            data02.push(array);
            console.log(data02);
            axisData2 = (new Date()).toLocaleTimeString().replace(/^\D*/, '');
            option2.xAxis[0].data.shift();
            option2.xAxis[0].data.push(axisData2);
            option2.xAxis[1].data.shift();
            option2.xAxis[1].data.push(myChart4.count++);
            myChart4.setOption(option2);
        };
        $.connection.hub.start();

        var charts = [];
        charts.push(myChart1);
        charts.push(myChart2);
        charts.push(myChart3);
        charts.push(myChart4);
        window.onresize = function () {
            for (var i = 0; i < charts.length; i++) {
                charts[i].resize();
            }
        };
    </script>

}
